/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    int sum;
    Map<Integer, Employee> map;
    public int getImportance(List<Employee> employees, int id) {
        sum = 0;
        map = new HashMap<>();
        for (Employee e : employees) {
            map.put(e.id, e);
        }
        dfs(id);
        return sum;
    }
    public void dfs(int id) {
        Employee e = map.get(id);
        sum = sum + e.importance;
        List<Integer> sub = e.subordinates;
        for (int s : sub) {
            dfs(s);
        }
    }
}

//前两次都是用bfs 这次是dfs 区别在 bfs的话 用queue 不需要递归
//dfs的话 需要递归 所以需要在外面声明map 和sum   速度上差不多
