/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<Integer, Integer> map;
    int max;
    public int[] findFrequentTreeSum(TreeNode root) {
        map = new HashMap<>();
        max = 0;
        postOrder(root);
        List<Integer> temp = new ArrayList<>();
        for (int sum : map.keySet()) {
            if (map.get(sum) == max) {
                temp.add(sum);
            }
        }
        int[] res = new int[temp.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = temp.get(i);
        }
        return res;
    }
    public int postOrder(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        int sum = left + right + root.val;
        map.put(sum, map.getOrDefault(sum, 0) + 1);
        max = Math.max(max, map.get(sum));
        return sum;
    }
}

//思路  要得到root的sum 需要左加右加root  所以要先求左和右的  很容易想到 用后序遍历即可~后序遍历即后根  先左or右都行
//因为要求和 所以postOrder需要返回值  先递归左右 并得到返回值 再得到root的sum 然后更新sum的频率
//这里注意 若需要按频率来排序 则考虑桶排序
//但此题只求最高频率的sum  则考虑设置max记录 每次更新频率 同时更新max频率
//最后遍历map 若为最高频则加入res即可~
