class MagicDictionary {
    Set<String> set;
    /** Initialize your data structure here. */
    public MagicDictionary() {
        set = new HashSet<>();
    }
    
    /** Build a dictionary through a list of words */
    public void buildDict(String[] dict) {
        for (String str : dict) {
            set.add(str);
        }
    }
    
    /** Returns if there is any word in the trie that equals to the given word after modifying exactly one character */
    public boolean search(String word) {
        char[] c = word.toCharArray();
        for (int i = 0; i < c.length; i++) {
            char ori = c[i];
            for (int j = 0; j < 26; j++) {
                char replace = (char)('a' + j);
                if (replace == ori) {
                    continue;
                }
                c[i] = replace;
                if (set.contains(String.valueOf(c))) {
                    return true;
                }
            }
            c[i] = ori;
        }
        return false;
    }
}

/**
 * Your MagicDictionary object will be instantiated and called as such:
 * MagicDictionary obj = new MagicDictionary();
 * obj.buildDict(dict);
 * boolean param_2 = obj.search(word);
 */
 
 //此题不需要用trie  用set建dic即可
 //对search方法 的str  拆成char数组 然后对每一位 都试着将其改为其他25个字母 然后化为String查找set
 //若这一位都试过 则判断下一位之前 记得将当前位 换为原来的字符
