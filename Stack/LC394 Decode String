class Solution {
    public String decodeString(String s) {
        Stack<Integer> count = new Stack<>();
        Stack<String> res = new Stack<>();
        String str = "";
        int i = 0;
        while (i < s.length()) {
            if (Character.isDigit(s.charAt(i))) {
                int num = 0;
                while (Character.isDigit(s.charAt(i))) {
                    num = 10 * num + (s.charAt(i) - '0');
                    i++;
                }
                count.push(num);
            } else if (s.charAt(i) == '[') {
                res.push(str);
                str = "";
                i++;
            } else if (s.charAt(i) == ']') {
                StringBuilder sb = new StringBuilder(res.pop());
                int times = count.pop();
                for (int j = 0; j < times; j++) {
                    sb.append(str);
                }
                str = sb.toString();
                i++;
            } else {
                str = str + s.charAt(i);
                i++;
            }
        }
        return str;
    }
}

//思路很清晰 细节需要注意处理  
//对每一个字符 如果是数字 需要考虑 有可能是多位数 所以需要循环得到数字 压入数字栈
//遇见左括号 证明前面的结束 把str压入结果栈 重置str
//遇见右括号 则先res pop出一个 再加上数字栈 pop的次数和当前str的重复 再把str设为新的sb
//遇见字母 则加到str即可
