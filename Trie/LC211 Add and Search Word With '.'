class WordDictionary {
    TrieNode root;
    
    class TrieNode {
        boolean isWord;
        TrieNode[] children;
        TrieNode() {
            children = new TrieNode[26];
        }
    }
    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        TrieNode end = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (end.children[c - 'a'] == null) {
                end.children[c - 'a'] = new TrieNode();
            }
            end = end.children[c - 'a'];
        }
        end.isWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        return search(word, root);
    }
    public boolean search(String word, TrieNode root) {
        TrieNode end = root;
        for (int i = 0; i < word.length(); i++) {
            char c = word.charAt(i);
            if (c == '.') {
                for (int j = 0; j < 26; j++) {
                    if (end.children[j] == null) {
                        continue;
                    }
                    if (search(word.substring(i + 1, word.length()), end.children[j])){
                        return true;
                    }       
                }
                return false;
            } else {
                if (end.children[c - 'a'] == null) {
                    return false;
                }
            }
            end = end.children[c - 'a'];
        }
        return end.isWord;
    }
}

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary obj = new WordDictionary();
 * obj.addWord(word);
 * boolean param_2 = obj.search(word);
 */
 
 //一遍AC 此题和上一个trie的不同在于 查找方法中 word可能包含 .  可以替换任何数
 //所以 理解为如果出现了. 当前层次的树就可以跳过 判断下一层
 //这种方法通过递归来实现 当出现了. 则在当前层的所有结点处递归调用search 只要出现true即可
 //注意递归调用时 由于需要记录是由哪个结点往下 所以重载search方法 多一个root参数
