class Solution {
    int m, n;
    public void gameOfLife(int[][] board) {
        if (board == null || board.length == 0) {
            return;
        }
        m = board.length;
        n = board[0].length;            ////2为原本死 现在活  3为原本活 现在死
        for (int a = 0; a < m; a++) {
            for (int b = 0; b < n; b++) {
                if (numOfLives(board, a, b) < 2 && board[a][b] == 1) {
                    board[a][b] = 3;
                }
                if (numOfLives(board, a, b) > 3 && board[a][b] == 1) {
                    board[a][b] = 3;
                }
                if (numOfLives(board, a, b) == 3 && board[a][b] == 0) {
                    board[a][b] = 2;
                }
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 3) {
                    board[i][j] = 0;
                }
                else if (board[i][j] == 2) {
                    board[i][j] = 1;
                }
            }
        }
    }
    public int numOfLives(int[][] board, int x, int y) {
        int count = 0;
        for (int i = Math.max(x - 1, 0); i <= Math.min(x + 1, m - 1); i++) {
            for (int j = Math.max(y - 1, 0); j <= Math.min(y + 1, n - 1); j++) {
                if (board[i][j] == 1 || board[i][j] == 3) {
                    count++;
                }
            }
        }
        if (board[x][y] == 1) {
            count--;
        }
        return count;
    }
}


/*
思路不难 就是根据每个值计算其周围8个位置的活细胞数 以此依据来改变
有两个难点 一个是 如何比较好的统计周围8个位置 避免越界
不需要用8个if来判断 因为越界的地方都默认为死细胞 即0， 不需要count
所以采用33的遍历  从 i - 1到 i + 1 嵌套 j - 1 到 j + 1 最后再判断是否多算自己即可
因为越界的数不需要判断 所以起点or终点 可以用max or min 与边界相比较获得
例如起点 i - 1 和 0 取max即可 终点 i + 1和 m - 1取min即可
第二个问题是 因为遍历不是同时改变 为了避免前面状态改变影响后面 我们可以用其他数来标记改变了的状态
最后再还原回去即可
*/
