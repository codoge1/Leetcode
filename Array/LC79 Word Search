class Solution {
    boolean[][] visited;
    public boolean exist(char[][] board, String word) {
        visited = new boolean[board.length][board[0].length];
        char[] c = word.toCharArray();
        for (int i = 0;i < board.length;i++) {
            for (int j = 0;j < board[0].length;j++) {
                if (exist(board, c, i, j ,0)) {
                    return true;
                }
            }
        }
        return false;
    }
    public boolean exist(char[][] board, char[] c, int i, int j, int index) {
        if (index == c.length) {
            return true;
        }
        if (i < 0 || j < 0 || i == board.length || j == board[0].length || visited[i][j] || board[i][j] != c[index]) {
            return false;
        }
        visited[i][j] = true;
        if (exist(board, c, i + 1, j, index + 1) ||
            exist(board, c, i - 1, j ,index + 1) ||
            exist(board, c, i ,j + 1, index + 1) ||
            exist(board, c, i, j - 1, index + 1)) {
            return true;
        }
        visited[i][j] = false;
        return false;
    }
}

//回溯法 利用exist方法回溯所有可能的情况
//需要注意的是用index 来记录目前在word里的位置 用visited数组记录已经用过的char 并且若一条路走不通 返回false前需要把visted还原
