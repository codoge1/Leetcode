class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid == null || obstacleGrid.length == 0 || obstacleGrid[0][0] == 1) {
            return 0;
        }
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
        int[][] dp = new int[m + 1][n + 1];
        dp[1][1] = 1;
        for (int i = 1;i <= m;i++) {
            for (int j = 1;j <= n;j++) {
                if (i == 1 && j == 1) {
                    continue;
                }
                if (obstacleGrid[i - 1][j - 1] == 1) {
                    dp[i][j] = 0;
                }
                else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
                }
            }
        }
        return dp[m][n];
    }
}

//跟I 基本没什么变化 多个obstacle 意味着如果某个坐标值为1 那么此路不通 dp此处设为0即可
//一些注意点 为了方便我们把dp数组长宽扩大一位 需要注意与obstacleGrid数组的索引对应
//还有需要判断的边界条件就是 起点被堵了....
