class Solution {
    public int subarraySum(int[] nums, int k) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int count = 0, sum = 0;
        for (int i = 0; i < nums.length; i++) {
            sum = sum + nums[i];
            if (map.containsKey(sum - k)) {
                count = count + map.get(sum - k);
            }
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}

//连续子数组的和 类型的题 都可以用一个数组的和 - 另一个数组的和
//因为sum 可能出现多次（有负数） 所以用map记录次数
//对每一个目前为止的和 都在map里找有没有sum - k 有的话 加上次数
//然后更新sum的次数
