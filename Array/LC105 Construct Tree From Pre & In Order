/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(0, 0, inorder.length - 1, preorder, inorder);
    }
    public TreeNode build(int preIndex, int left, int right, int[] preorder, int[] inorder) {
        if (preIndex >= preorder.length || left > right) {
            return null;
        }
        TreeNode node = new TreeNode(preorder[preIndex]);
        int inIndex = 0;
        for (int i = left;i <= right;i++) {
            if (inorder[i] == preorder[preIndex]) {
                inIndex = i;
                break;
            }
        }
        node.left = build(preIndex + 1, left, inIndex - 1, preorder, inorder);
        node.right = build(preIndex + inIndex - left + 1, inIndex + 1, right, preorder, inorder);
        return node;
    }
}

//记住树的三种顺序遍历的区别  利用preorder是先根再左再右 和 inorder先左再根再右的特性
//pre中第一个是总root 因为没有重复 在in中找到这个值 则这个值左边则是左子树 右边则是右子树 设计递归即可！
