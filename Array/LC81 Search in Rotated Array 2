class Solution {
    public boolean search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target) {
                return true;
            }
            if (nums[mid] < nums[high] || nums[low] > nums[mid]) {
                if (target > nums[mid] && target <= nums[high]) {
                    low = mid + 1;
                }
                else {
                    high = mid - 1;
                }
            }
            else if (nums[low] < nums[mid] || nums[mid] > nums[high]) {
                if (target >= nums[low] && target < nums[mid]) {
                    high = mid - 1;
                }
                else {
                    low = mid + 1;
                }
            }
            else {
                low++;
                high--;
            }
        }
        return false;
    }
}

//这题和I不同点在于可能出现重复数字 在I中我们是分辨mid的左or右 哪个是正常排序的 从而分情况讨论
//而这道题类似 因为有可能mid 和两边重复导致我们无法分辨正常排序的sub数组  我们还可以通过某一边的乱序 来推测另一边的有序
//当两种情况都未发生 则证明mid和high low都相等 则往中间收即可
