class Solution {
    public int search(int[] nums, int target) {
        int left = 0,right = nums.length - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[mid] < nums[right]) {
                if (target > nums[mid] && target <= nums[right]) {
                    left = mid + 1;
                }
                else {
                    right = mid - 1;
                }
            }
            else {
                if (target >= nums[left] && target < nums[mid]) {
                    right = mid - 1;
                }
                else {
                    left = mid + 1;
                }
            }
        }
        return -1;
    }
}

//二分查找法的变种
//因为rotate过 所以每次找到一个mid值 需要与最右边比较
//符合升序：则如果target在右边 则查找右边 else 查找左边
//不符合升序 则代表mid左边是正常的升序 则再判断若target在左边 则查找左边
