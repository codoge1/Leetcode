class Solution {
    public int maxSubArray(int[] nums) {
        int max = nums[0], sum = nums[0];
        for (int i = 1; i < nums.length; i++) {
            sum = Math.max(nums[i], nums[i] + sum);
            max = Math.max(max, sum);
        }
        return max;
    }
}

//DP 和 分治算法
//思路是  因为是连续数组 所以遇到一个数 不能跳过 只能选择带or不带前面的sum 实时更新max即可
