class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        //boolean[][] map = new boolean[numCourses][numCourses];
        int[] pres = new int[numCourses];
        for (int i = 0;i < prerequisites.length;i++) {
            int toLearn = prerequisites[i][0];
            //int pre = prerequisites[i][1];
            //map[pre][toLearn] = true;
            pres[toLearn]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0;i < numCourses;i++) {
            if (pres[i] == 0) {
                q.add(i);
            }
        }
        int count = 0;
        int[] res = new int[numCourses];
        while (!q.isEmpty()) {
            int course = q.poll();
            res[count] = course;
            count++;
            for (int i = 0;i < prerequisites.length;i++) {
                if (prerequisites[i][1] == course) {
                    pres[prerequisites[i][0]]--;
                    if (pres[prerequisites[i][0]] == 0) {
                        q.add(prerequisites[i][0]);
                    }
                }
            }
        }
        return count == numCourses ? res : new int[0];
    }
}

//和I基本没区别 这次只是添加个数组装进去即可
//需要注意的是 这次在前面我注释掉了map数组 直接在prerequisite上判断 也可以只是没有这么直观
