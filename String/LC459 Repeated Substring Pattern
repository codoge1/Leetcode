public class Solution {
    public boolean repeatedSubstringPattern(String s) {
        int l = s.length();
        for (int i = l / 2;i > 0;i--){
            if (l % i == 0){
                int n = l / i; 
                String part = s.substring(0,i);
                StringBuilder sb = new StringBuilder();
                for (int j = 0;j < n;j++){
                    sb.append(part);
                }
                if (sb.toString().equals(s)){
                    return true;
                }
            }
        }
        return false;
    }
}

//思路是 对其所有长度的子串进行判断 若能构成 则子串长度必须能被len整除 所以从一半长度开始
//若能整除 则截取 并重复n次 与原string比较 相等则true~
