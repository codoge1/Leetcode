class Solution {
    public String getPermutation(int n, int k) {
        if (n == 1) {
            return "1";
        }
        int[] fac = new int[n];
        fac[0] = 1;
        for (int i = 1; i < n; i++) {
            fac[i] = fac[i - 1] * i;
        }
        List<Integer> nums = new ArrayList<>();
        for (int i = 1; i <= n; i++) {
            nums.add(i);
        }
        StringBuilder sb = new StringBuilder();
        int i = 0;
        k = k - 1;
        while (i < n) {
            int index = k / fac[n - 1 - i];
            sb.append(nums.get(index));
            nums.remove(index);
            k = k - index * fac[n - 1 - i];
            i++;
        }
        return sb.toString();
    }
}

//以第一个数分组 每组有n-1的阶乘个  用k/每组数量  即可得到该为第几组
//注意k从1开始 需要-1 然后每次得到最高位的索引 在nums中取得 记得删去nums中用过的数
//然后更新k（在k前面的数被排除了）
