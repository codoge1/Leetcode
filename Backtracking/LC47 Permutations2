class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean[] used = new boolean[nums.length];
        backtrack(res, temp, nums, used);
        return res;
    }
    public void backtrack(List<List<Integer>> res, List<Integer> temp, int[] nums, boolean[] used) {
        if (temp.size() == nums.length) {
            res.add(new ArrayList<>(temp));
            return;
        }
        for (int i = 0; i < nums.length; i++) {
            if (used[i]) {
                continue;
            }
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
                continue;
            }
            temp.add(nums[i]);
            used[i] = true;
            backtrack(res, temp, nums, used);
            temp.remove(temp.size() - 1);
            used[i] = false;
        }
    }
}

//给的数组中有重复 所以第一时间想到 对用过的数 用boolean数组存储
//难点在于 有重复数字的情况下 因为是排列 所以所有数都会用上
//彻底的理解是  有重复情况的数组 我们要避免重复的数 出现在同一位 而是要让重复的数 出现在下一位
//Combination sum里面的处理 是i>start 再比较i 和i-1  这样的话 在同一位迭代的时候 就会跳过第二个及以后相同的数
//而在下一位的迭代中 第一个数 因为不满足i>start 所以不会跳过 会加到下一位
//而在permutation中 因为循环是从i=0开始的 如果无脑跳过相同的数 那么下一位 也不会加上 即11永远不会出现
//所以 需要避免同一位的相等数 但要允许下一位的相等数 Combination里用的是start
//而这里 我们就判断 上一位的数 是否用过 若用过 那么当前一定是在下一位 则允许加
//若没用过 则当前一定在迭代这一位 则要continue
