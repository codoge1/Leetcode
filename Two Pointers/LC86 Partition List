/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode partition(ListNode head, int x) {
        ListNode fake = new ListNode(0);
        fake.next = head;
        ListNode pre = fake;
        while (head != null && head.val < x) {
            head = head.next;
            pre = pre.next;
        }
        if (head == null) {
            return fake.next;
        }
        ListNode next = head.next;
        while (next != null) {
            if (next.val < x) {
                head.next = next.next;
                next.next = pre.next;
                pre.next = next;
                pre = pre.next;
                next = head.next;
            } else {
                head = head.next;
                next = next.next;
            }
        }
        return fake.next;
    }
}

//第二次做这题 想复杂了。。。比较简单的方法就是分为两条链 最后合并即可
//这次的解法 是直接在原链中操作 pre处理是让pre和head分离 之后遇见小于x的  则插入到pre和pre.next之间 然后递增pre及其余结点
//虽然想复杂了 不过时间复杂度是一样 链表的题 画图+仔细
