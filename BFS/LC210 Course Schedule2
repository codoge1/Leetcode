class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] pres = new int[numCourses];
        for (int[] pair : prerequisites) {
            int course = pair[0];
            pres[course]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < pres.length; i++) {
            if (pres[i] == 0) {
                q.add(i);
            }
        }
        int[] res = new int[numCourses];
        int i = 0;
        while (!q.isEmpty()) {
            int course = q.poll();
            res[i] = course;
            i++;
            for (int[] pair : prerequisites) {
                if (pair[1] == course) {
                    pres[pair[0]]--;
                    if (pres[pair[0]] == 0) {
                        q.add(pair[0]);
                    }
                }
            }
        }
        return (i == numCourses) ? res : new int[0];
    }
}

//在I的情况下 多一个数组即可  若计数不等于numCourses 则返回空数组 否则返回res
