/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<Integer, Integer> map;
    int max;
    public int[] findFrequentTreeSum(TreeNode root) {
        map = new HashMap<>();
        max = 0;
        postOrder(root);
        List<Integer> temp = new ArrayList<>();
        for (int key : map.keySet()) {
            int f = map.get(key);
            if (f == max) {
                temp.add(key);
            }
        }
        int[] res = new int[temp.size()];
        for (int i = 0; i < res.length; i++) {
            res[i] = temp.get(i);
        }
        return res;
    }
    public int postOrder(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = postOrder(root.left);
        int right = postOrder(root.right);
        int sum = root.val + left + right;
        map.put(sum, map.getOrDefault(sum, 0) + 1);
        max = Math.max(max, map.get(sum));
        return sum;
    }
}

//思路是 对树的每个结点都求其subtree sum   然后用map统计各个sum的次数 因为求最大频率的 所以同时记录max即可
//对一个结点 求其sum 为root的val 加其左右的sub sum  所以因为用后序遍历
