class Solution {
    int m, n;
    int[][] dirs = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public List<int[]> pacificAtlantic(int[][] matrix) {
        List<int[]> res = new ArrayList<>();
        if (matrix == null || matrix.length == 0) {
            return res;
        }
        m = matrix.length;
        n = matrix[0].length;
        boolean[][] canReachP = new boolean[m][n];
        boolean[][] canReachA = new boolean[m][n];
        for (int i = 0; i < m; i++) {
            dfs(matrix, canReachP, Integer.MIN_VALUE, i, 0);
            dfs(matrix, canReachA, Integer.MIN_VALUE, i, n - 1);
        }
        for (int j = 0; j < n; j++) {
            dfs(matrix, canReachP, Integer.MIN_VALUE, 0, j);
            dfs(matrix, canReachA, Integer.MIN_VALUE, m - 1, j);
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (canReachP[i][j] && canReachA[i][j]) {
                    res.add(new int[]{i, j});
                }
            }
        }
        return res;
    }
    public void dfs(int[][] matrix, boolean[][] canReach, int h, int i, int j) {
        if (i < 0 || i >= m || j < 0 || j >= n || canReach[i][j] || matrix[i][j] < h) {
            return;
        }
        canReach[i][j] = true;
        for (int[] dir : dirs) {
            dfs(matrix, canReach, matrix[i][j], i + dir[0], j + dir[1]);
        }
    }
}

//在BFS里 是用bfs做的  即没有用到回溯  利用一个queue 先把边界放进去 然后每出来一个 查看其四周 能的话加入q  
//这样的好处 是不需要设置height参数 因为是一层一层判断 而且每次能从queue得到上一层 但时间没有dfs快
//dfs递归 则最适合 dfs多一个高度参数 每次遍历 若越界 或者已经true 或者高度小于上一次的h 则return
//否则 设置为true 递归四方   对四周的初始 只需要dfs时 高度为min值即可 更加方便
