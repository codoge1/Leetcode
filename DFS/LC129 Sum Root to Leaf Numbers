/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        if (root.left == null && root.right == null) {
            return root.val;
        }
        if (root.left == null) {
            root.right.val = root.right.val + 10 * root.val;
            return sumNumbers(root.right);
        }
        if (root.right == null) {
            root.left.val = root.left.val + 10 * root.val;
            return sumNumbers(root.left);
        }
        root.right.val = root.right.val + 10 * root.val;
        root.left.val = root.left.val + 10 * root.val;
        return sumNumbers(root.left) + sumNumbers(root.right); 
    }
}

//自己的sol 直接对结点判断 若为null 则0  为叶子 则root.val
//若只有一边 则将那边的结点值 加上root的10倍 然后返回递归
//若两边 则都处理 然后返回递归两边的和

//高票解法 是写sum 方法 里面传入累积的和s 若为叶子 则返回10*s+val  否则返回两边递归 比较简洁  时间一样
