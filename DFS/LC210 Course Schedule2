class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        int[] pres = new int[numCourses];
        for (int[] pair : prerequisites) {
            int toLearn = pair[0];
            pres[toLearn]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < numCourses; i++) {
            if (pres[i] == 0) {
                q.offer(i);
            }
        }
        int count = 0;
        int[] res = new int[numCourses];
        while (!q.isEmpty()) {
            int course = q.poll();
            res[count] = course;
            count++;
            for (int[] pair : prerequisites) {
                if (pair[1] == course) {
                    int toLearn = pair[0];
                    pres[toLearn]--;
                    if (pres[toLearn] == 0) {
                        q.offer(toLearn);
                    }
                }
            }
        }
        return (count == numCourses) ? res : new int[0];
    }
}

//无数次了 不过在I的基础上 添加的话 时间复杂度一般  to do list：更好的解法
