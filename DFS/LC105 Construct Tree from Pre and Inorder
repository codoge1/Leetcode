/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return build(0, 0, inorder.length - 1, preorder, inorder);
    }
    public TreeNode build(int pre, int left, int right, int[] preorder, int[] inorder) {
        if (pre >= preorder.length || left > right) {
            return null;
        }
        TreeNode root = new TreeNode(preorder[pre]);
        int in = 0;
        for (int i = left; i <= right; i++) {
            if (inorder[i] == preorder[pre]) {
                in = i;
                break;
            }
        }
        root.left = build(pre + 1, left, in - 1, preorder, inorder);
        root.right = build(pre + in - left + 1, in + 1, right, preorder, inorder);
        return root;
    }
}

//前序遍历提供根 然后在中序中找到根 分为两半 递归建树  难点就是递归时 注意下一个结点 在pre中的位置需要考虑
