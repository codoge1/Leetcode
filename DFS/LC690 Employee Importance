/*
// Employee info
class Employee {
    // It's the unique id of each node;
    // unique id of this employee
    public int id;
    // the importance value of this employee
    public int importance;
    // the id of direct subordinates
    public List<Integer> subordinates;
};
*/
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        Map<Integer, Employee> map = new HashMap<>();
        for (Employee e : employees) {
            map.put(e.id, e);
        }
        Employee root = map.get(id);
        int res = 0;
        Queue<Employee> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()) {
            Employee sup = q.poll();
            res = res + sup.importance;
            for (int eId : sup.subordinates) {
                q.offer(map.get(eId));
            }
        }
        return res;
    }
}

//dfs和bfs都行 上解为bfs 即设置队列 每次出来一个 加上importance 然后将其下属 放入q即可  因为下属list是id的list 所以设置map 映射id 和employee
//若dfs的话 则对根dfs 只要下属不为空 对下属全部dfs 为空则返回
