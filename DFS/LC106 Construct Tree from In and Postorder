/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        return build(postorder.length - 1, 0, inorder.length - 1, inorder, postorder);
    }
    public TreeNode build(int post, int left, int right, int[] inorder, int[] postorder) {
        if (post < 0 || left > right) {
            return null;
        }
        TreeNode root = new TreeNode(postorder[post]);
        int in = 0;
        for (int i = left; i <= right; i++) {
            if (inorder[i] == postorder[post]) {
                in = i;
                break;
            }
        }
        root.left = build(post + in - right - 1, left, in - 1, inorder, postorder);
        root.right = build(post - 1, in + 1, right, inorder, postorder);
        return root;
    }
}

//和上一题类似 关键点是找到子节点在post中的位置 递归建树即可
