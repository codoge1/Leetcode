class Solution {
    public int integerReplacement(int n) {
        int count = 0;
        while (n != 1) {
            if ((n & 1) == 0) {
                n = n >>> 1;
            } else if (n == 3 || ((n >>> 1) & 1) == 0) {
                n--;
            } else {
                n++;
            }
            count++;
        }
        return count;
    }
}

//思路： 偶数一定比奇数好  所有只要偶数 就右移一位  总体思路是 减少二进制中的1的数量
//对奇数来说 要看倒数第二位  若为01 则减法好 若为11 则加法不会差
//但有一个例外 对于 就是11 = 3 来说  因为11的前面全是0  所以如果+1  则凭空把前面的0 变为1了 没有减1好
//所以就按照这个操作 直到为1 统计次数
//在判断后两位是01 还是11的时候 除了直接判断倒数第二位  还可以用上一题的方法  & 11 即3  若==1 则为01  否则为11
//另外需要注意 在这题中 如果用>> 在int最大值的case过不了！需要注意区别 因为int最大值的case 会apply +1的情况
//+1后 就会变成负数 所以此题 一定要用>>>  无符号右移！
