class Solution {
    public int maxProduct(String[] words) {
        int[] alpha = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            for (char c : words[i].toCharArray()) {
                   alpha[i] = alpha[i] | (1 << (c - 'a'));
            }
        }
        int max = 0;
        for (int i = 0; i < words.length; i++) {
            for (int j = i + 1; j < words.length; j++) {
                if ((alpha[i] & alpha[j]) == 0) {
                    max = Math.max(max, words[i].length() * words[j].length());
                }
            }
        }
        return max;
    }
}

//很赞的方法  难点在于判断两个string不存在共同的字母  因为都是小写字母 26个  所以可以用
//int 32位的后面26位来表示 有则为1 无则为0  每个string 对应一个int 然后用|来构造int
//随后遍历数组 若出现两个数的对应的int &为0 则证明无公共字母 更新max长度即可
